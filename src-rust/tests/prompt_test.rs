use octocrab::models::issues::Issue;

#[test]
fn test_create_prompt() {
    // Create a test Issue
    let issue = Issue {
        number: 123,
        title: String::from("Test Issue"),
        body: Some(String::from("This is a test issue description")),
        ..Default::default()
    };
    
    let style_guide = "Follow Rust style guidelines";
    
    let prompt = crate::mcp::prompt::create_prompt(&issue, style_guide);
    
    // Verify prompt contains all required elements
    assert!(prompt.contains("GitHub Issue #123"));
    assert!(prompt.contains("Test Issue"));
    assert!(prompt.contains("This is a test issue description"));
    assert!(prompt.contains("Follow Rust style guidelines"));
    assert!(prompt.contains("## Changes Overview"));
    assert!(prompt.contains("## Files Modified"));
    assert!(prompt.contains("## Code Changes"));
    assert!(prompt.contains("## Test Coverage"));
    assert!(prompt.contains("## Commit Message"));
}

#[test]
fn test_create_prompt_empty_body() {
    // Test with an issue that has no body
    let issue = Issue {
        number: 456,
        title: String::from("Empty Body Issue"),
        body: None,
        ..Default::default()
    };
    
    let style_guide = "Test style guide";
    
    let prompt = crate::mcp::prompt::create_prompt(&issue, style_guide);
    
    // Verify prompt is still properly formatted
    assert!(prompt.contains("GitHub Issue #456"));
    assert!(prompt.contains("Empty Body Issue"));
    assert!(prompt.contains("Test style guide"));
    assert!(!prompt.contains("null")); // Ensure null values aren't included
}

#[test]
fn test_format_pr_body() {
    let response = String::from("Test response content");
    
    let pr_body = crate::mcp::prompt::format_pr_body(response);
    
    // Verify PR body format
    assert!(pr_body.contains("Test response content"));
    assert!(pr_body.contains("This PR was automatically generated by the Autocode action"));
    assert!(pr_body.contains("Generated by [Autocode]"));
}